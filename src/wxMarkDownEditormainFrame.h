#ifndef __wxMarkDownEditormainFrame__
#define __wxMarkDownEditormainFrame__

/**
@file
Subclass of mainFrame, which is generated by wxFormBuilder.
*/

#include <wx/regex.h>
#include <wx/webview.h>
#include <thread>
#include "gui/wxMarkDownEditorGUI.h"
#include "maddy/parser.h"
#include "utils/FileInfo.h"
#include "utils/PreviewUpdateThread.h"

//// end generated include

/** Implementing mainFrame */
class wxMarkDownEditormainFrame : public mainFrame {
public:
    /** Constructor */
    wxMarkDownEditormainFrame(wxWindow* parent);
    ~wxMarkDownEditormainFrame();
    void OnEditorChar(wxKeyEvent& event) override;
    void OnEditorKeyDown(wxKeyEvent& event) override;
    void OnEditorKeyUp(wxKeyEvent& event) override;
    void OnWebViewNavigating(wxWebViewEvent& event);
    // void OnHtmlLinkClicked(wxHtmlLinkEvent& event) override;
    /// menu item events
    void OnExit(wxCommandEvent& event) override;
    void OnNew(wxCommandEvent& event) override;
    void OnSave(wxCommandEvent& event) override;
    void OnSaveAs(wxCommandEvent& event) override;
    void OnOpen(wxCommandEvent& event) override;
    /// opened files list
    void OnOpenFileActivated(wxDataViewEvent& event) override;

    /// splitter
    void OnSplitterSashPositionChanged(wxSplitterEvent& event) override;

    void OnThreadMessage(wxThreadEvent& event);

private:
    std::shared_ptr<maddy::ParserConfig> parserConfig   = nullptr;
    std::shared_ptr<maddy::Parser> parser               = nullptr;
    std::map<wxString, std::shared_ptr<FileInfo>> files = {};
    std::shared_ptr<FileInfo> currentFile               = nullptr;
    wxConfig* config                                    = nullptr;
    wxString currentCssFile                             = wxEmptyString;
    wxWebView* webView                                  = nullptr;
    PreviewUpdateThread* updateThread                   = nullptr;
    std::vector<wxString> fileHistory                   = {};
    std::vector<wxMenuItem*> historyMenuItems           = {};

    void UpdatePreview(bool forceUpdate = false);
    void LoadStylesFromConfig(const wxString& paletteName);
    void OnPaletteChange(wxCommandEvent& event);
    void CreateDefaultConfigFile(const wxString& configFilePath);
    void OpenFile(const wxString& fileName);
    void UpdateOpenedFileInfo(const wxFileName& file, FileInfo::CallbackType callback);

    void RequestPreviewUpdate() {
        if (updateThread) {
            updateThread->RequestUpdate();
        }
    }

    void OnUpdatePreview(wxCommandEvent&) {
        UpdatePreview(true);
    }
    void StoreFileHistory(const wxString& filePath);
    void LoadFileHistory();
};

#endif  // __wxMarkDownEditormainFrame__
