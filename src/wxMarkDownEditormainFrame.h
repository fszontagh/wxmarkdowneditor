#ifndef __wxMarkDownEditormainFrame__
#define __wxMarkDownEditormainFrame__

/**
@file
Subclass of mainFrame, which is generated by wxFormBuilder.
*/

#include <cmark.h>
#include <wx/regex.h>
#include <wx/webview.h>
#include <map>
#include <memory>
#include <thread>
#include "gui/wxMarkDownEditorGUI.h"
#include "utils/FileInfo.h"
#include "utils/PreviewUpdateThread.h"

//// end generated include

/** Implementing mainFrame */
class wxMarkDownEditormainFrame : public mainFrame {
public:
    /** Constructor */
    wxMarkDownEditormainFrame(wxWindow* parent);
    ~wxMarkDownEditormainFrame();
    void OnEditorChar(wxKeyEvent& event) override;
    void OnEditorKeyDown(wxKeyEvent& event) override;
    void OnEditorKeyUp(wxKeyEvent& event) override;
    void OnWebViewNavigating(wxWebViewEvent& event);
    // void OnHtmlLinkClicked(wxHtmlLinkEvent& event) override;
    /// menu item events
    void OnExit(wxCommandEvent& event) override;
    void OnNew(wxCommandEvent& event) override;
    void OnSave(wxCommandEvent& event) override;
    void OnSaveAs(wxCommandEvent& event) override;
    void OnOpen(wxCommandEvent& event) override;
    /// opened files list
    void OnOpenFileActivated(wxDataViewEvent& event) override;

    /// splitter
    void OnSplitterSashPositionChanged(wxSplitterEvent& event) override;

    void OnThreadMessage(wxThreadEvent& event);

private:
    std::map<wxString, std::shared_ptr<FileInfo>> files = {};
    std::shared_ptr<FileInfo> currentFile               = nullptr;
    wxConfig* config                                    = nullptr;
    wxString currentCssFile                             = wxEmptyString;
    wxWebView* webView                                  = nullptr;
    PreviewUpdateThread* updateThread                   = nullptr;
    std::vector<wxString> fileHistory                   = {};
    std::vector<wxMenuItem*> historyMenuItems           = {};

    void UpdatePreview(bool forceUpdate = false);
    void LoadStylesFromConfig(const wxString& paletteName);
    void OnPaletteChange(wxCommandEvent& event);
    void CreateDefaultConfigFile(const wxString& configFilePath);
    void OpenFile(const wxString& fileName);
    void UpdateOpenedFileInfo(const wxFileName& file, FileInfo::CallbackType callback);

    void RequestPreviewUpdate() {
        if (updateThread) {
            updateThread->RequestUpdate();
        }
    }

    void OnUpdatePreview(wxCommandEvent&) {
        UpdatePreview(true);
    }
    void StoreFileHistory(const wxString& filePath);
    void LoadFileHistory();
    inline void SelectOpenedFileByPath(const wxString& filePath) {
        for (auto file : this->files) {
            if (file.second->file.GetAbsolutePath() == filePath && file.second->item && file.second->item.IsOk()) {
                this->m_currentOpenFiles->SetCurrentItem(file.second->item);
                return;
            }
        }
    }

    inline wxStyledTextCtrl* cloneEditor(wxStyledTextCtrl* original) {
        wxStyledTextCtrl* cloned = new wxStyledTextCtrl(original->GetParent(), wxID_ANY);
        cloned->Hide();
        cloned->StyleSetFont(wxSTC_STYLE_DEFAULT, original->StyleGetFont(wxSTC_STYLE_DEFAULT));
        cloned->StyleSetForeground(wxSTC_STYLE_DEFAULT, original->StyleGetForeground(wxSTC_STYLE_DEFAULT));
        cloned->StyleSetBackground(wxSTC_STYLE_DEFAULT, original->StyleGetBackground(wxSTC_STYLE_DEFAULT));
        cloned->SetWrapMode(original->GetWrapMode());
        cloned->SetWrapVisualFlags(original->GetWrapVisualFlags());
        cloned->SetTabWidth(original->GetTabWidth());
        cloned->SetSize(original->GetSize());

        cloned->Bind(wxEVT_CHAR, &wxMarkDownEditormainFrame::OnEditorChar, this);
        cloned->Bind(wxEVT_KEY_DOWN, &wxMarkDownEditormainFrame::OnEditorKeyDown, this);
        cloned->Bind(wxEVT_KEY_UP, &wxMarkDownEditormainFrame::OnEditorKeyUp, this);

        return cloned;
    };
    inline bool ChangeCurrentFile(std::shared_ptr<FileInfo> NewFile) {
        if (NewFile == nullptr) {
            return false;
        }

        if (this->currentFile) {
            if (this->currentFile == NewFile) {
                return false;
            }
            this->MarkDownPanel->GetSizer()->Detach(this->currentFile->editor);
            this->currentFile->editor->Hide();
        }
        this->currentFile = NewFile;

        this->MarkDownPanel->GetSizer()->Add(this->currentFile->editor, 1, wxEXPAND | wxALL, 5);
        if (this->currentFile->editor->GetText() != this->currentFile->content) {
            this->currentFile->editor->SetText(this->currentFile->content);
        }
        this->currentFile->editor->Show();
        this->MarkDownPanel->Layout();

        wxSetWorkingDirectory(this->currentFile->file.GetPath());
        this->SetTitle(this->currentFile->file.GetFullName() + " - wxMarkDownEditor");
        return true;
    };
};

#endif  // __wxMarkDownEditormainFrame__
